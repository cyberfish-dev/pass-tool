// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.10.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:collection/collection.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they have generic arguments: `decrypt_payload`, `encrypt_payload`
// These types are ignored because they are neither used by any `pub` functions nor (for structs and enums) marked `#[frb(unignore)]`: `EncryptedRecordFile`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `fmt`, `fmt`, `from`, `from`, `from`, `from`

/// Derives a 64-byte master key from a password and salt using Argon2id.
/// Zeroizes password after use.
Future<U8Array64> deriveMasterKey({
  required String password,
  required List<int> salt,
}) => RustLib.instance.api.crateApiCryptoDeriveMasterKey(
  password: password,
  salt: salt,
);

/// Splits a 64-byte master key into two 32-byte keys (encryption and MAC).
Future<(U8Array32, U8Array32)> splitMasterKey({required U8Array64 masterKey}) =>
    RustLib.instance.api.crateApiCryptoSplitMasterKey(masterKey: masterKey);

/// Generates a cryptographically secure random 16-byte salt.
Future<U8Array16> generateSalt() =>
    RustLib.instance.api.crateApiCryptoGenerateSalt();

/// Generates a cryptographically secure random 32-byte submaster key.
Future<U8Array32> generateSubmasterKey() =>
    RustLib.instance.api.crateApiCryptoGenerateSubmasterKey();

/// Encrypts data using AES-256-GCM with a random nonce and AAD.
/// Output is nonce || ciphertext.
Future<Uint8List> encryptIt({
  required List<int> data,
  required U8Array32 encKey,
  required List<int> aad,
}) => RustLib.instance.api.crateApiCryptoEncryptIt(
  data: data,
  encKey: encKey,
  aad: aad,
);

/// Decrypts an encrypted submaster key using AES-256-GCM and AAD.
/// Returns the decrypted submaster key.
Future<Uint8List> decryptIt({
  required List<int> encData,
  required List<int> encKey,
  required List<int> aad,
}) => RustLib.instance.api.crateApiCryptoDecryptIt(
  encData: encData,
  encKey: encKey,
  aad: aad,
);

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CryptoError>>
abstract class CryptoError implements RustOpaqueInterface {}

class U8Array16 extends NonGrowableListView<int> {
  static const arraySize = 16;

  @internal
  Uint8List get inner => _inner;
  final Uint8List _inner;

  U8Array16(this._inner) : assert(_inner.length == arraySize), super(_inner);

  U8Array16.init() : this(Uint8List(arraySize));
}

class U8Array32 extends NonGrowableListView<int> {
  static const arraySize = 32;

  @internal
  Uint8List get inner => _inner;
  final Uint8List _inner;

  U8Array32(this._inner) : assert(_inner.length == arraySize), super(_inner);

  U8Array32.init() : this(Uint8List(arraySize));
}

class U8Array64 extends NonGrowableListView<int> {
  static const arraySize = 64;

  @internal
  Uint8List get inner => _inner;
  final Uint8List _inner;

  U8Array64(this._inner) : assert(_inner.length == arraySize), super(_inner);

  U8Array64.init() : this(Uint8List(arraySize));
}
