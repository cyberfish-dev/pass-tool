// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.10.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `eq`, `eq`, `eq`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `hash`, `hash`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VaultMetadataVault>>
abstract class VaultMetadataVault implements RustOpaqueInterface {
  Future<String> addEntry({
    required String name,
    required EntryCategory category,
    String? folder,
    String? icon,
  });

  Future<Folder> addFolder({required String name});

  Map<EntryCategory, BigInt> get categoryCounts;

  List<VaultMetadataEntry> get entries;

  Map<String, BigInt> get folderCounts;

  List<Folder> get folders;

  BigInt get trashedCount;

  set categoryCounts(Map<EntryCategory, BigInt> categoryCounts);

  set entries(List<VaultMetadataEntry> entries);

  set folderCounts(Map<String, BigInt> folderCounts);

  set folders(List<Folder> folders);

  set trashedCount(BigInt trashedCount);

  static Future<VaultMetadataVault> default_() =>
      RustLib.instance.api.crateApiVaultModelsVaultMetadataVaultDefault();

  Future<void> recalculateCounts();

  Future<bool> removeFolderById({required String folderId});

  Future<bool> updateEntry({
    required String id,
    required String name,
    String? folder,
    String? icon,
    required bool isTrashed,
  });
}

abstract class VaultPayload {}

class CreditCardRecord {
  final String number;
  final String name;
  final String brand;
  final String expMonth;
  final String expYear;
  final String cvv;

  const CreditCardRecord({
    required this.number,
    required this.name,
    required this.brand,
    required this.expMonth,
    required this.expYear,
    required this.cvv,
  });

  static Future<EntryCategory> category() =>
      RustLib.instance.api.crateApiVaultModelsCreditCardRecordCategory();

  @override
  int get hashCode =>
      number.hashCode ^
      name.hashCode ^
      brand.hashCode ^
      expMonth.hashCode ^
      expYear.hashCode ^
      cvv.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is CreditCardRecord &&
          runtimeType == other.runtimeType &&
          number == other.number &&
          name == other.name &&
          brand == other.brand &&
          expMonth == other.expMonth &&
          expYear == other.expYear &&
          cvv == other.cvv;
}

enum EntryCategory { login, secureNote, creditCard }

class Folder {
  final String id;
  final String name;

  const Folder({required this.id, required this.name});

  @override
  int get hashCode => id.hashCode ^ name.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Folder &&
          runtimeType == other.runtimeType &&
          id == other.id &&
          name == other.name;
}

class LoginRecord {
  final String username;
  final String password;
  final TOTPConfig? totp;

  const LoginRecord({
    required this.username,
    required this.password,
    this.totp,
  });

  static Future<EntryCategory> category() =>
      RustLib.instance.api.crateApiVaultModelsLoginRecordCategory();

  @override
  int get hashCode => username.hashCode ^ password.hashCode ^ totp.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is LoginRecord &&
          runtimeType == other.runtimeType &&
          username == other.username &&
          password == other.password &&
          totp == other.totp;
}

enum MatchType { default_, baseDomain, host, startsWith, exact, regexp, never }

class SecureNoteRecord {
  final String note;

  const SecureNoteRecord({required this.note});

  static Future<EntryCategory> category() =>
      RustLib.instance.api.crateApiVaultModelsSecureNoteRecordCategory();

  @override
  int get hashCode => note.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is SecureNoteRecord &&
          runtimeType == other.runtimeType &&
          note == other.note;
}

class SiteMapping {
  final String url;
  final MatchType matchType;

  const SiteMapping({required this.url, required this.matchType});

  @override
  int get hashCode => url.hashCode ^ matchType.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is SiteMapping &&
          runtimeType == other.runtimeType &&
          url == other.url &&
          matchType == other.matchType;
}

enum TOTPAlgorithm { sha1, sha256, sha512 }

class TOTPConfig {
  final String secret;
  final int period;
  final int digits;
  final TOTPAlgorithm algorithm;
  final String? issuer;
  final String? accountName;

  const TOTPConfig({
    required this.secret,
    required this.period,
    required this.digits,
    required this.algorithm,
    this.issuer,
    this.accountName,
  });

  @override
  int get hashCode =>
      secret.hashCode ^
      period.hashCode ^
      digits.hashCode ^
      algorithm.hashCode ^
      issuer.hashCode ^
      accountName.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is TOTPConfig &&
          runtimeType == other.runtimeType &&
          secret == other.secret &&
          period == other.period &&
          digits == other.digits &&
          algorithm == other.algorithm &&
          issuer == other.issuer &&
          accountName == other.accountName;
}

class VaultMetadataEntry {
  final String id;
  final String name;
  final EntryCategory category;
  final String? folder;
  final PlatformInt64 updatedAt;
  final int version;
  final bool isTrashed;
  final String? icon;
  final List<String> androidPackages;
  final List<SiteMapping> websites;

  const VaultMetadataEntry({
    required this.id,
    required this.name,
    required this.category,
    this.folder,
    required this.updatedAt,
    required this.version,
    required this.isTrashed,
    this.icon,
    required this.androidPackages,
    required this.websites,
  });

  @override
  int get hashCode =>
      id.hashCode ^
      name.hashCode ^
      category.hashCode ^
      folder.hashCode ^
      updatedAt.hashCode ^
      version.hashCode ^
      isTrashed.hashCode ^
      icon.hashCode ^
      androidPackages.hashCode ^
      websites.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is VaultMetadataEntry &&
          runtimeType == other.runtimeType &&
          id == other.id &&
          name == other.name &&
          category == other.category &&
          folder == other.folder &&
          updatedAt == other.updatedAt &&
          version == other.version &&
          isTrashed == other.isTrashed &&
          icon == other.icon &&
          androidPackages == other.androidPackages &&
          websites == other.websites;
}
