// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.10.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `clone`, `clone`, `clone`, `clone`, `eq`, `eq`, `fmt`, `fmt`, `fmt`, `fmt`, `hash`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VaultMetadataVault>>
abstract class VaultMetadataVault implements RustOpaqueInterface {
  Future<void> addEntry({
    required String name,
    required EntryCategory category,
    String? folder,
    String? icon,
  });

  Future<Folder> addFolder({required String name});

  Map<EntryCategory, BigInt> get categoryCounts;

  List<VaultMetadataEntry> get entries;

  Map<String, BigInt> get folderCounts;

  List<Folder> get folders;

  BigInt get trashedCount;

  set categoryCounts(Map<EntryCategory, BigInt> categoryCounts);

  set entries(List<VaultMetadataEntry> entries);

  set folderCounts(Map<String, BigInt> folderCounts);

  set folders(List<Folder> folders);

  set trashedCount(BigInt trashedCount);

  static Future<VaultMetadataVault> default_() =>
      RustLib.instance.api.crateApiVaultModelsVaultMetadataVaultDefault();

  Future<void> recalculateCounts();

  Future<bool> removeFolderById({required String folderId});
}

enum EntryCategory { login, secureNote, creditCard }

class Folder {
  final String id;
  final String name;

  const Folder({required this.id, required this.name});

  @override
  int get hashCode => id.hashCode ^ name.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Folder &&
          runtimeType == other.runtimeType &&
          id == other.id &&
          name == other.name;
}

class VaultMetadataEntry {
  final String id;
  final String name;
  final EntryCategory category;
  final String? folder;
  final PlatformInt64 updatedAt;
  final int version;
  final bool isTrashed;
  final String? icon;

  const VaultMetadataEntry({
    required this.id,
    required this.name,
    required this.category,
    this.folder,
    required this.updatedAt,
    required this.version,
    required this.isTrashed,
    this.icon,
  });

  @override
  int get hashCode =>
      id.hashCode ^
      name.hashCode ^
      category.hashCode ^
      folder.hashCode ^
      updatedAt.hashCode ^
      version.hashCode ^
      isTrashed.hashCode ^
      icon.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is VaultMetadataEntry &&
          runtimeType == other.runtimeType &&
          id == other.id &&
          name == other.name &&
          category == other.category &&
          folder == other.folder &&
          updatedAt == other.updatedAt &&
          version == other.version &&
          isTrashed == other.isTrashed &&
          icon == other.icon;
}
